<-:
  help: Create a tackle provider with tests and a CI.

  project_slug:
    type: str
    default:
      ->: input Name of project slug? Actual repo name.
      default: "tackle-"

  project_name:
    type: str
    default:
      ->: input Name of your provider? Used in README.md title.
      default: "{{ project_slug|title|replace('-', ' ')}}"

  description:
    type: str
    default:
      ->: input A description of what the project is?
      default: "A tackle box provider that "

  author_name:
    type: str
    default->: input What is your name? Used in README and LICENSE

  author_email:
    type: str
    default->: input What is your email? Blank to leave out.

  repo_owner:
    type: str
    default:
      ->: input What is your github / org name?
      default: "{{author_name}}"

  default_branch:
    type: str
    default->: select --choices ['main','master']

  tackle_file:
    type: str
    default:
      ->: select What type of default tackle file do you want to start with?
      choices:
        - Code generation boiler plate - full project: code-generation.yaml
        - Declarative CLI: cli.yaml
        - No tackle file - provider is just for hooks: none

  hooks_enable:
    type: str
    default->: confirm Do you want to setup hooks?

  tests_enable:
    type: str
    default->: confirm Do you want to generate tests?

  exec:
    # Generate license
    license:
      ->: tackle sudoblockio/tackle-license
      output: "{{project_slug}}"
      author: "{{author_name}}"

    # Generate tackle file
    tackle_file_gen_>: generate tackle-files/{{tackle_file}} {{project_slug}}/.tackle.yaml --if "tackle_file!='none'"

    # Generate hooks
    hooks->:
      if: hooks_enable
      type->: input What is your hook type? (Used to call hook)
      class_name->: input What is the class name? --default "{{ type|title|replace('-', '')|replace('_', '') }}Hook"
      gen->: generate hooks {{project_slug}}/hooks

    # Generate tests
    tests->:
      if: tests_enable
      conftest->: generate tests-pytest/conftest.py {{project_slug}}/tests/
      tackle-file->:
        if: tackle_file != 'none'
        gen->: generate tests-pytest/test_tackle.py {{project_slug}}/tests/
      hooks->:
        if: hooks_enable
        gen tests->: generate tests-pytest/test_hooks.py {{project_slug}}/tests/
        gen hook fixtures->: generate tests-pytest/fixtures {{project_slug}}/tests/fixtures

      tox_enable->: confirm Do you want to use tox?
      gen-tox->: generate tox.ini {{project_slug}}/tox.ini

      # CI
      ci_enable->: confirm Do you want to generate continuous integration scripts?
      ci->:
        if: ci_enable
        platforms:
          ->: checkbox What platforms to test against? --checked
          choices:
            - ubuntu
            - macos
            - windows
        python_versions:
          ->: checkbox Which python versions to test against? Will run in matrix.
          checked: true
          choices:
            - "3.9"
            - "3.10"
            - "3.11"
        use_foresight->: confirm Do you want to use Foresight for test telemetry?
        gen->: generate ci-github {{project_slug}}/

    # Generate boilerplate
    gen:
      boilerplate->: generate templates/boilerplate {{project_slug}}/
